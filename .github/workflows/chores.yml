name: Chores

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GOPRIVATE: github.com/decisiveai/opentelemetry-operator
  TOKEN: ${{ secrets.TOKEN_OPERATOR }}

jobs:
  lint:
    name: Lint on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v7
        with:
          install-mode: "binary"
          version: v2.0.2

  check-go-file-changes:
    name: Check if Go files changed
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      go_files_changed: ${{ steps.check.outputs.go_files_changed }}
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare commits

      - name: Determine base commit
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          else
            BASE_COMMIT=$(git rev-parse HEAD~1)  # Previous commit on main
          fi
          echo "BASE_COMMIT=$BASE_COMMIT"
          echo "BASE_COMMIT=$BASE_COMMIT" >> "$GITHUB_ENV"

      - name: Check for Go-related file changes
        id: check
        run: |
          # Fetch latest main branch
          git fetch origin main

          # Find changed Go files (excluding _test.go and vendor/)
          CHANGED_FILES=$(git diff --name-only "$BASE_COMMIT" HEAD -- '**/*.go' 'go.mod' 'go.sum' '*.go' | grep -vE '^vendor/' || true)

          # Define output file path
          OUTPUT_FILE=".github/outputs/all_changed_files.json"
          mkdir -p .github/outputs  # Ensure the directory exists

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No relevant Go file changes detected."
            echo "go_files_changed=false" >> "$GITHUB_OUTPUT"
            echo "[]" > "$OUTPUT_FILE"  # Save empty JSON array
          else
            echo "Relevant Go file changes detected."
            echo "go_files_changed=true" >> "$GITHUB_OUTPUT"

            # Convert to JSON format and save to file
            echo "$CHANGED_FILES" | jq -R . | jq -s . > "$OUTPUT_FILE"
          fi

      - name: Upload changed files record
        uses: actions/upload-artifact@v4
        with:
          name: changed-files
          path: .github/outputs/all_changed_files.json

  test:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
#    needs: [lint, check-go-file-changes]
#    if: needs.check-go-file-changes.outputs.go_files_changed == 'true'
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Running Tests
        run: |
          go mod vendor
          go mod tidy
          CGO_ENABLED=0 go test -coverprofile=coverage.out -mod=vendor -v -count=1 ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.out

  report-coverage:
    name: Report code coverage
    runs-on: ubuntu-latest
    needs: [test, check-go-file-changes]
    if: github.event_name == 'pull_request'
    env:
      # Export variables used by the GitHub CLI application ("gh")
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
    steps:
      # Setup Go so we can install the "go-coverage-report" tool in the next step
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.23

      # Install the go-coverage-report binary. It is recommended to pin the used version here.
      - name: Install go-coverage-report
        run: go install github.com/fgrosse/go-coverage-report/cmd/go-coverage-report@v1.2.0

      # Download code coverage results from the "unit_tests" job.
      - name: Download code coverage results from current run
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .github/outputs

      # Rename the code coverage results file from the current run to "new-coverage.txt"
      - name: Rename code coverage results file from current run
        run: mv .github/outputs/coverage.out .github/outputs/new-coverage.out

      - name: Find and download last successful coverage artifact on main
        id: get_baseline
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the latest "code-coverage" artifact on main
          ARTIFACT=$(gh api -X GET "repos/${{ github.repository }}/actions/artifacts" \
            --jq '[.artifacts[] | select(.name=="code-coverage")] | sort_by(.updated_at) | last')

          if [[ -z "$ARTIFACT" || "$ARTIFACT" == "null" ]]; then
            echo "No previous successful 'code-coverage' artifact found on main."
            exit 1
          fi

          # Extract the workflow run ID from the artifact
          RUN_ID=$(echo "$ARTIFACT" | jq -r '.workflow_run.id')
          echo "Found latest coverage artifact from Run ID: $RUN_ID"

          if [[ -z "$RUN_ID" || "$RUN_ID" == "null" ]]; then
            echo "Could not determine workflow run ID for the artifact."
            exit 1
          fi

          # Download the code coverage artifact from that workflow run
          gh run download $RUN_ID --name=code-coverage --dir=.github/outputs

          # Rename the file to match expected format
          if [[ -f ".github/outputs/coverage.out" ]]; then
            mv .github/outputs/coverage.out .github/outputs/old-coverage.out
          else
            echo "Error: coverage.out not found in downloaded artifacts."
            exit 1
          fi

      - name: Download changed files list
        uses: actions/download-artifact@v4
        with:
          name: changed-files
          path: .github/outputs

      - name: Compare code coverage results
        run: |
          go-coverage-report \
            .github/outputs/old-coverage.out \
            .github/outputs/new-coverage.out \
            .github/outputs/all_changed_files.json \
          > .github/outputs/coverage-comment.md

      - name: Comment on pull request
        run: |
          COMMENT_ID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments -q '.[] | select(.user.login=="github-actions[bot]" and (.body | test("Coverage Î”")) ) | .id' | head -n 1)
          if [ -z "$COMMENT_ID" ]; then
            echo "Creating new coverage report comment"
          else
            echo "Replacing old coverage report comment (ID: $COMMENT_ID)"
            gh api -X DELETE repos/${{ github.repository }}/issues/comments/$COMMENT_ID
          fi

          gh pr comment ${{ github.event.number }} --body-file=.github/outputs/coverage-comment.md

  coverage-badge:
    name: Update coverage badge on README
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository  # Ensures README.md is available
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .

      - name: List downloaded files (debugging)
        run: ls -R

      - name: Verify README exists
        run: ls -l README.md || echo "README.md not found!"

      - name: Generate Go Coverage Badge
        id: generate-badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      - name: Verify Changed README
        if: steps.generate-badge.outcome == 'success'
        id: verify-changed-readme
        run: |
          git fetch origin main
          if git diff --quiet origin/main -- README.md; then
            echo "README.md has NOT changed."
            echo "readme_changed=false" >> $GITHUB_ENV
          else
            echo "README.md has changed."
            echo "readme_changed=true" >> $GITHUB_ENV
          fi

      - name: Commit changes
        if: env.readme_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure we are on the main branch
          git fetch origin main
          git checkout main
          git pull origin main

          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit and push changes
          git add README.md
          git commit -m "chore: Updated coverage badge." || echo "No changes to commit"
          git push origin main

  capture-coverage:
    name: Capture coverage in platform_health repo
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Configure git for private modules
        run: git config --global url."https://user:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .

      - name: Capture coverage in health repo
        run: |
          go install github.com/axw/gocov/gocov@latest
          gocov convert coverage.out | gocov report > coverage-mdai-s3-logs-reader.txt

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.PLATFORM_HEALTH_ACCESS_APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Set safe git directory
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: git config --global --add safe.directory '*'

      - name: Commit coverage to health repo
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          git clone https://x-access-token:${GH_TOKEN}@github.com/DecisiveAI/platform-health.git
          cd platform-health
          
          # Configure git
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Copy the new coverage file
          cp ../coverage-mdai-s3-logs-reader.txt .
          
          # Commit and push changes
          git add coverage-mdai-s3-logs-reader.txt
          if git diff --cached --quiet; then
            echo "âœ… No changes to commit."
            exit 0
          fi
          git commit -m "chore: Update coverage report from CI"
          git push origin main
